namespace day02

type Move = Forward Nat | Down Nat | Up Nat
type Pos = Pos Nat Nat Nat

textToMove : Text -> Move
textToMove s =
    p = Text.split ? s
    match p with
      ["forward", n] -> Forward (fromTextOrFail n)
      ["down", n] -> Down (fromTextOrFail n)
      ["up", n] -> Up (fromTextOrFail n)
      _ -> bug "unexpected"

move : Pos -> Move -> Pos
move p m =
    (Pos horiz depth aim) = p
    match m with
        Forward n -> Pos (horiz + n) depth aim
        Down n -> Pos horiz (depth + n) aim
        Up n -> Pos horiz (depth - n) aim

move2 : Pos -> Move -> Pos
move2 p m =
    (Pos horiz depth aim) = p
    match m with
        Forward n -> Pos (horiz + n) (depth + aim * n) aim
        Down n -> Pos horiz depth (aim + n)
        Up n -> Pos horiz depth (aim - n)

calc : Pos -> Nat
calc = cases (Pos horiz depth _) -> horiz * depth

main : '{IO, Exception} ()
main = do
    use Nat *
    input = readLines "input02.txt" |> List.map textToMove
    pos = List.foldLeft move (Pos 0 0 0) input
    printLine ("Solution 1: " ++ (calc pos |> Nat.toText))
    pos2 = List.foldLeft move2 (Pos 0 0 0) input
    printLine ("Solution 2: " ++ (calc pos2 |> Nat.toText))
